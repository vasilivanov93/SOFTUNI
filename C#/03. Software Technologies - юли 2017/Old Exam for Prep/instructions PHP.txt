 + start xampp with MySQL and Apache
 
 + open Heidi

 + open project with PhpStorm

 + run command composer install

 + delete Entity in src/AppBundle/Entity/...

 + create Entity with command php bin/console doctrine:generate:entity
The Entity shortcut name: AppBundle:Cat
Configuration format [annotation]: Enter

New field name : name
Field type: Enter
Field length: Enter
Is nullable: Enter
Unique: Enter

New field name : nickname
Field type: Enter
Field length: Enter
Is nullable: Enter
Unique: Enter

New field name : price
Field type: float
Is nullable: Enter
Unique: Enter

Enter to finish Entity

 + Create Form configuration in src/AppBundle/Form/..
$builder
    ->add('name', TextType::class)
    ->add('nickname', TextType::class)
    ->add('price', NumberType::class);
Only Symfony

 + create database with command php bin/console doctrine:database:create

 + force database with command php bin/console doctrine:schema:update --force

 + make configuration for run project
PHP Script
name: server
file name: bin/console
argument: server:run
fix

 + for index view
public function index(Request $request)
{
	$cats = $this->getDoctrine()->getRepository(Cat::class)->findAll();

	return $this->render('cat/index.html.twig', ['cats' => $cats]);
}

 + for create view
public function create(Request $request)
{
    $cat = new Cat();

    $form = $this->createForm(CatType::class, $cat);
    $form->handleRequest($request);

    if($form->isSubmitted()) {
        $em = $this->getDoctrine()->getManager();
        $em->persist($cat);
        $em->flush();

        return $this->redirect('/');
    }

    return $this->render('cat/create.html.twig', ['form' => $form->createView()]);
}

 + for edit view
public function edit($id, Request $request)
{
    $cat = $this->getDoctrine()->getRepository(Cat::class)->find($id);

    $form = $this->createForm(CatType::class, $cat);
    $form->handleRequest($request);

    if($form->isSubmitted()) {
        $em = $this->getDoctrine()->getManager();
        $em->persist($cat);
        $em->flush();

        return $this->redirect('/');
    }

    return $this->render('cat/edit.html.twig', ['form' => $form->createView(), 'cat' => $cat]);
}

 + for delete view
public function delete($id, Request $request)
 {
     $cat = $this->getDoctrine()->getRepository(Cat::class)->find($id);

     $form = $this->createForm(CatType::class, $cat);
     $form->handleRequest($request);

     if($form->isSubmitted()) {
         $em = $this->getDoctrine()->getManager();
         $em->remove($cat);
         $em->flush();

         return $this->redirect('/');
     }

     return $this->render('cat/delete.html.twig', ['form' => $form->createView(), 'cat' => $cat]);
 }



